{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the Browsertrix Cloud official user guide and developer docs. These docs will contain the following sections.</p> <ul> <li>Deployment Guide - Info on how to install and deploy Browsertrix Cloud locally or in the cloud.</li> <li>Developer Docs - for info on how to developing Browsertrix Cloud itself.</li> <li>User Guide - for info on how to use Browsertrix Cloud system.</li> </ul> <p>If you are unfamiliar with Browsertrix Cloud, please check out our website or the main repository at https://github.com/webrecorder/browsertrix-cloud</p> <p>Our docs are still under construction. If you find something missing, chances are we haven't gotten around to writing that part yet. If you find typos or something isn't clear or seems incorrect, please open an issue and we'll try to make sure that your questions get answered here in the future!</p>"},{"location":"deploy/","title":"Introduction","text":"<p>Browsertrix Cloud is designed to be a cloud-native application running in Kubernetes.</p> <p>However, despite the name, it is perfectly reasonable (and easy!) to deploy Browsertrix Cloud locally using one of the many available local Kubernetes options. Here are a few recommendations for different scenarios.</p> <p>The main requirements for Browsertrix Cloud are:</p> <ul> <li>A Kubernetes Cluster</li> <li>Helm 3 (package manager for Kubernetes)</li> </ul> <p>We have prepared a Local Deployment and Production (Self-Hosted and Cloud) Deployment guides to help with setting up Browsertrix Cloud for different scenarios.</p>"},{"location":"deploy/#non-kubernetes-deployments","title":"Non Kubernetes Deployments","text":"<p>Previously, Browsertrix Cloud also supported Docker Compose and podman-based deployment. This is now deprecated due to the complexity of maintaining feature parity across different setups, and with various Kubernetes deployment options being available and easy to deploy, even on a single machine.</p> <p>Making deployment of Browsertrix Cloud as easy as possible remains a key goal, and we welcome suggestions for how we can further improve our Kubernetes deployment options.</p>"},{"location":"deploy/local/","title":"Local Deployment","text":"<p>To just test out Browsertrix Cloud on your local machine, you'll first need to have a working Kubernetes cluster.</p>"},{"location":"deploy/local/#installing-kubernetes","title":"Installing Kubernetes","text":"<p>Before running Browsertrix Cloud, you'll need to set up a running Kubernetes cluster.</p> <p>Today, there are numerous ways to deploy Kubernetes fairly easily, and we recommend trying one of the single-node options, which include Docker Desktop, microk8s, minikube and k3s.</p> <p>The instructions below assume you have cloned the https://github.com/webrecorder/browsertrix-cloud repository locally, and have local package managers for your platform (eg. <code>brew</code> for Mac, <code>choco</code> for Windows, etc...) already installed.</p> <p>Here are some environment specific instructions for setting up a local cluster from different Kubernetes vendors:</p> Docker Desktop (recommended for Mac and Windows) <p>For Mac and Windows, we recommend testing out Browsertrix Cloud using Kubernetes support in Docker Desktop as that will be one of the simplest options.</p> <ol> <li> <p>Install Docker Desktop if not already installed.</p> </li> <li> <p>From the Dashboard app, ensure <code>Enable Kubernetes</code> is checked from the Preferences screen.</p> </li> <li> <p>Restart Docker Desktop if asked, and wait for it to fully restart.</p> </li> <li> <p>Install Helm, which can be installed with <code>brew install helm</code> (Mac) or <code>choco install kubernetes-helm</code> (Windows) or following some of the other install options</p> </li> </ol> MicroK8S (recommended for Ubuntu) <p>For Ubuntu and other linux distros, we recommend using MicroK8S for both local deployment and production.</p> <ol> <li> <p>Install MicroK8s, by running <code>sudo snap install microk8s --classic</code> see more detailed instructions here or alternate installation instructions here</p> </li> <li> <p>Install the following addons <code>microk8s enable dns hostpath-storage registry helm3</code>. (For production, also add <code>ingress cert-manager</code> to the list of addons)</p> </li> <li> <p>Wait for add-ons to finish installing with <code>microk8s status --wait-ready</code></p> </li> </ol> <p>Note: microk8s comes with its own version helm, so you don't need to install it separately. Replace <code>helm</code> with <code>microk8s helm3</code> in the subsequent instructions below.</p> Minikube (Windows, Mac or Linux) <ol> <li> <p>Install Minikube following installation instructions, eg. <code>brew install minikube</code></p> </li> <li> <p>Install Helm, which can be installed with <code>brew install helm</code> (Mac) or <code>choco install kubernetes-helm</code> (Windows) or following some of the other install options</p> </li> <li> <p>Run the Helm command as described above.</p> </li> <li> <p>Mac Only: To access Browsertrix Cloud running in minikube on a mac, run <code>minikube service browsertrix-cloud-frontend --url</code> and then access Browsertrix Cloud via the provided URL. This is needed as Browsertrix Cloud is running in a VM.</p> </li> </ol> K3S (recommended for non-Ubuntu Linux) <ol> <li> <p>Install K3s as per the instructions</p> </li> <li> <p>Install Helm, which can be installed with <code>brew install helm</code> (Mac) or <code>choco install kubernetes-helm</code> (Windows) or following some of the other install options</p> </li> <li> <p>Set <code>KUBECONFIG</code> to point to the config for K3S: <code>export KUBECONFIG=/etc/rancher/k3s/k3s.yaml</code> to ensure Helm will use the correct version.</p> </li> </ol>"},{"location":"deploy/local/#launching-browsertrix-cloud-with-helm","title":"Launching Browsertrix Cloud with Helm","text":"<p>Once you have a running Kubernetes cluster with one of the options above, and Helm 3 installed, you can then run from the Browsertrix Cloud repo directory:</p> <pre><code>helm upgrade --install -f ./chart/values.yaml -f ./chart/examples/local-config.yaml btrix ./chart/\n</code></pre> <p>The local setup includes the full Browsertrix Cloud system, with frontend, backend api, db (via MongoDB) and storage (via Minio)</p> <p>An admin user with name <code>admin@example.com</code> and password <code>PASSW0RD!</code> will be automatically created.</p> <p>This config uses the standard config (<code>./chart/values.yaml</code>) with a couple additional settings for local deployment (<code>./chart/examples/local-config.yaml</code>). With Helm, additional YAML files can be added to further override previous settings.</p> <p>These settings can be changed in charts/examples/local-config.yaml.</p> <p>Note that the admin user and password will not be reset after creation.</p>"},{"location":"deploy/local/#waiting-for-cluster-to-start","title":"Waiting for Cluster to Start","text":"<p>After running the helm command, you should see something like:</p> <pre><code>Release \"btrix\" does not exist. Installing it now.\nNAME: btrix\nLAST DEPLOYED: &lt;time&gt;\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\n</code></pre> <p>After that, especially on first run, it may take a few minutes for the Browsertrix Cloud cluster to start, as all images need to be downloaded locally.</p> <p>You can try running the command: <code>kubectl wait --for=condition=ready pod --all --timeout=300s</code> to wait for all pods to be initialized.</p> <p>The command will exit when all pods have been loaded, or if there is an error and it times out.</p> <p>If the command succeeds, you should be able to access Browsertrix Cloud by loading: http://localhost:30870/ in your browser.</p>"},{"location":"deploy/local/#debugging-pod-issues","title":"Debugging Pod Issues","text":"<p>If this command fails, you can also run <code>kubectl get pods</code> to see the status of each of the pods.</p> <p>There should be 4 pods listed: backend, frontend, minio and mongodb. If any one is not ready for a while, something may be wrong.</p> <p>To get more details about why a pod has not started, you can run <code>kubectl describe &lt;podname&gt;</code> and see the latest status at the bottom.</p> <p>Often, the error may be obvious, such as failed to pull an image.</p> <p>If the pod is running, or previously ran, you can also get the logs from the container by running <code>kubectl logs &lt;podname&gt;</code></p> <p>The outputs of these commands will be helpful if you'd like to report an issue on GitHub</p>"},{"location":"deploy/local/#updating-the-cluster","title":"Updating the Cluster","text":"<p>To update the cluster, re-run the same command again, which will pull the latest images. In this way, you can upgrade to the latest release of Browsertrix Cloud. The upgrade will preserve the database and current archives.</p> <pre><code>helm upgrade --install -f ./chart/values.yaml -f ./chart/examples/local-config.yaml btrix ./chart/\n</code></pre>"},{"location":"deploy/local/#uninstalling","title":"Uninstalling","text":"<p>To uninstall, run <code>helm uninstall btrix</code>.</p> <p>By default, the database + storage volumes are not automatically deleted, so you can run <code>helm upgrade...</code> again to restart the cluster in its current state.</p> <p>To fully delete all persistent data created in the cluster, also run <code>kubectl delete pvc --all</code> after uninstalling.</p>"},{"location":"deploy/local/#running-with-local-images","title":"Running With Local Images","text":"<p>By default, this setup will pull the latest release of Browsertrix Cloud. However, if you are developing locally, you may want to use your local images instead.</p> <p>First, open <code>./chart/examples/local-config.yaml</code> and add the following, which will ensure only local images are used:</p> <pre><code>backend_pull_policy: \"Never\"\nfrontend_pull_policy: \"Never\"\n</code></pre> <p>Now, rebuild either the backend and/or frontend images locally. The exact process depends on the Kubernetes deployment in use:</p> Docker Desktop <p>Rebuild the local images by running <code>./scripts/build-backend.sh</code> and/or <code>./scripts/build-frontend.sh</code> scripts to build the images in the local Docker.</p> MicroK8S <p>MicroK8s uses its own container registry, running on port 32000. </p> <ol> <li> <p>Set <code>export REGISTRY=localhost:32000/</code> and then run <code>./scripts/build-backend.sh</code> and/or <code>./scripts/build-frontend.sh</code> to rebuild the images into the MicroK8S registry. </p> </li> <li> <p>In <code>./chart/examples/local-config.yaml</code>, uncomment out one or both of the following lines to use the local images:</p> </li> </ol> <pre><code>backend_image: \"localhost:32000/webrecorder/browsertrix-backend:latest\"\nfrontend_image: \"localhost:32000/webrecorder/browsertrix-frontend:latest\"\n</code></pre> Minikube <p>Minikube comes with its own image builder to update the images used in Minikube.</p> <p>To build the backend image, run:</p> <pre><code>minikube image build -t webrecorder/browsertrix-backend:latest ./backend\n</code></pre> <p>To build a local frontend image, run: <pre><code>minikube image build -t webrecorder/browsertrix-frontend:latest ./frontend\n</code></pre></p> K3S <p>K3S uses <code>containerd</code> by default. To use local images, they need to be imported after rebuilding.</p> <ol> <li> <p>Rebuild the images with Docker by running by running <code>./scripts/build-backend.sh</code> and/or <code>./scripts/build-frontend.sh</code> scripts. (Requires Docker to be installed as well).</p> </li> <li> <p>Serializer the images to .tar:</p> </li> </ol> <pre><code>docker save webrecorder/browsertrix-backend:latest &gt; ./backend.tar\ndocker save webrecorder/browsertrix-frontend:latest &gt; ./frontend.tar\n</code></pre> <ol> <li>Import images into k3s containerd:</li> </ol> <pre><code>k3s ctr images import --base-name webrecorder/browsertrix-backend:latest ./backend.tar\nk3s ctr images import --base-name webrecorder/browsertrix-frontend:latest ./frontend.tar\n</code></pre> <p>Once the images have been built and any other config changes made per the above instructions, simply run the <code>helm upgrade...</code> command again to restart with local images.</p>"},{"location":"deploy/production/","title":"Production: Self-Hosted and Cloud","text":"<p>For production and hosted deployments (both on a single machine or in the cloud), the only requirement is to have a designed domain and (strongly recommended, but not required) second domain for signing web archives. </p> <p>We are also experimenting with Ansible playbooks for cloud deployment setups.</p> <p>The production deployments also allow using an external mongodb server, and/or external S3-compatible storage instead of the bundled minio.</p>"},{"location":"deploy/production/#single-machine-deployment-with-microk8s","title":"Single Machine Deployment with MicroK8S","text":"<p>For a single-machine production deployment, we recommend using microk8s.</p> <ol> <li> <p>Install MicroK8S, as suggested in the local deployment guide and ensure the <code>ingress</code> and <code>cert-manager</code> addons are also enabled.</p> </li> <li> <p>Copy <code>cp ./chart/examples/microk8s-hosted.yaml ./chart/my-config.yaml</code> to make local changes.</p> </li> <li> <p>Set the <code>ingress.host</code>, <code>ingress.cert_email</code> and <code>signing.host</code> fields in <code>./chart/my-config.yaml</code> to your host and domain</p> </li> <li> <p>Set the super-admin username and password, and mongodb username and password in <code>./chart/my-config.yaml</code></p> </li> <li> <p>Run with:</p> </li> </ol> <pre><code>helm upgrade --install -f ./chart/values.yaml -f ./chart/my-config.yaml btrix ./chart/\n</code></pre>"},{"location":"deploy/production/#using-custom-storage","title":"Using Custom Storage","text":"<p>If you would like to use existing external storage, such an existing S3-compatible storage, also set the default storage, for example:</p> <pre><code>minio_local: false\n\nstorages:\n  - name: \"default\"\n    access_key: &lt;access key&gt;\n    secret_key: &lt;secret key&gt;\n\n    endpoint_url: \"https://s3.&lt;region&gt;.amazonaws.com/bucket/path/\"\n</code></pre> <p>Note that this setup is not limited to Amazon S3, but should work with any S3-compatible storage service.</p>"},{"location":"deploy/production/#using-custom-mongodb","title":"Using Custom MongoDB","text":"<p>If you would like to use an externally hosted MongoDB, you can add the following config to point to a custom MongoDB instance.</p> <p>The <code>db_url</code> should follow the MongoDB Connection String Format which should include the username and password of the remote instance.</p> <pre><code>mongo_local: false\n\nmongo_auth:\n  db_url: mongodb+srv://...\n</code></pre>"},{"location":"deploy/production/#cloud-deployment","title":"Cloud Deployment","text":"<p>There are also many ways to deploy Browsertrix Cloud on various cloud providers.</p> <p>To simplify this process, we are working on Ansible playbooks for setting up Browsertrix Cloud on commonly used infrastructure.</p>"},{"location":"deploy/production/#ansible-deployment","title":"Ansible Deployment","text":"<p>Ansible makes the initial setup and configuration of your Browsertrix Cloud instance automated and repeatable. </p> <p>To use, you will need to install Ansible on your control computer and then you can use these to deploy to Browsertrix Cloud on remote and cloud environments.</p> <p>Currently, we provide playbooks for the following tested environments:</p> <ul> <li>DigitalOcean</li> <li>Microk8s</li> </ul>"},{"location":"deploy/ansible/digitalocean/","title":"DigitalOcean","text":"<p>Playbook Path: ansible/playbooks/install_microk8s.yml</p> <p>This playbook provides an easy way to install BrowserTrix Cloud on DigitalOcean. It automatically sets up Browsertrix with, LetsEncrypt certificates.</p>"},{"location":"deploy/ansible/digitalocean/#requirements","title":"Requirements","text":"<p>To run this ansible playbook, you need to:</p> <ul> <li>Have a DigitalOcean Account where this will run.</li> <li>Create a DigitalOcean API Key which will need to be set in your terminal sessions environment variables</li> <li>Configure a DNS A Record and CNAME record.</li> <li>Install Ansible on your local machine (the control machine).</li> </ul>"},{"location":"deploy/ansible/digitalocean/#install","title":"Install","text":"<ol> <li> <p>Clone the repo: <pre><code>git clone https://github.com/webrecorder/browsertrix-cloud.git\ncd browsertrix-cloud\n</code></pre></p> </li> <li> <p>Look at the configuration options and modify them or pass them as extra variables as shown below. </p> </li> <li> <p>Run the playbook: <pre><code>ansible-playbook playbooks/do_setup.yml -e project_name=\"your-project\" -e superuser_email=\"you@yourdomain.com\" -e domain_name=\"yourdomain.com\"\n</code></pre></p> </li> </ol>"},{"location":"deploy/ansible/digitalocean/#upgrading","title":"Upgrading","text":"<ol> <li> <p>Run <code>git pull</code></p> </li> <li> <p>Run the playbook: <pre><code>ansible-playbook playbooks/do_setup.yml -e project_name=\"your-project\" -e superuser_email=\"you@yourdomain.com\" -e domain_name=\"yourdomain.com\" -t helm_upgrade\n</code></pre></p> </li> </ol>"},{"location":"deploy/ansible/microk8s/","title":"Microk8s","text":"<p>Playbook Path: ansible/playbooks/install_microk8s.yml</p> <p>This playbook provides an easy way to install Browsertrix Cloud on an Ubuntu (tested on Jammy Jellyfish) and a RedHat 9 (tested on Rocky Linux 9). It automatically sets up Browsertrix with, Letsencrypt certificates.</p>"},{"location":"deploy/ansible/microk8s/#requirements","title":"Requirements","text":"<p>To run this ansible playbook, you need to:</p> <ul> <li>Have a server / VPS where browsertrix will run.</li> <li>Configure a DNS A Record to point at your server's IP address.</li> <li>Make sure you can ssh to it, with a sudo user: ssh @ <li>Install Ansible on your local machine (the control machine).</li>"},{"location":"deploy/ansible/microk8s/#install","title":"Install","text":"<ol> <li> <p>Clone the repo: <pre><code>git clone https://github.com/webrecorder/browsertrix-cloud.git\ncd browsertrix-cloud\n</code></pre></p> </li> <li> <p>Look at the configuration options and modify them or pass them as extra variables as shown below. </p> </li> <li> <p>Add your IP address above to a new file called [inventory/hosts]</p> </li> <li> <p>Run the playbook: <pre><code>ansible-playbook -i inventory/hosts playbooks/install_microk8s.yml -e host_ip=\"1.2.3.4\" -e domain_name=\"yourdomain.com\" -e your_user=\"your_vps_admin_user\"\n</code></pre></p> </li> </ol>"},{"location":"deploy/ansible/microk8s/#upgrading","title":"Upgrading","text":"<ol> <li> <p>Run <code>git pull</code></p> </li> <li> <p>Run the playbook: <pre><code>ansible-playbook -i inventory/hosts playbooks/install_microk8s.yml -e host_ip=\"1.2.3.4\" -e domain_name=\"yourdomain.com\" -t helm_upgrade\n</code></pre></p> </li> </ol>"},{"location":"dev/","title":"Developer Docs","text":"<p>Browsertrix Cloud consists of a Python-based backend and TypeScript-based frontend.</p>"},{"location":"dev/#backend","title":"Backend","text":"<p>The backend is an API-only system, using the FastAPI framework. The latest API reference is available under ./api of a running cluster.</p> <p>TODO Add additional info here</p>"},{"location":"dev/#frontend","title":"Frontend","text":"<p>The frontend UI is implemented in TypeScript, using the Lit framework and Shoelace component library.</p> <p>The static build of the frontend is bundled with nginx, but the frontend can be deployed locally in dev mode against an existing backend.</p> <p>See Running Frontend for more details.</p> <p>TODO Add additional info here</p>"},{"location":"dev/docs/","title":"Docs","text":""},{"location":"dev/docs/#updating-the-docs","title":"Updating the Docs","text":"<p>This documentation is built with MkDocs and configured via <code>mkdocs.yml</code> in the project root.</p> <p>The docs can be found in the <code>./docs</code> subdirectory.</p> <p>To build this documentation locally, install Material for MkDocs with pip:</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>In the project root directory run <code>mkdocs serve</code> to run a local version of the documentation site.</p> <p>The docs hosted on docs.browsertrix.cloud are created from the main branch of https://github.com/webrecorder/browsertrix-cloud</p>"},{"location":"dev/frontend-dev/","title":"Running the Frontend","text":"<p>This guide explains how to deploy an instance of the Browsertrix Cloud frontend for development. The frontend can connect to a Browsertrix Cloud API backend running locally or remotely.</p>"},{"location":"dev/frontend-dev/#quickstart","title":"Quickstart","text":"<p>Ensure the current working directory is set to the <code>/frontend</code> folder.</p> <p>Install dependencies:</p> <pre><code>yarn\n</code></pre> <p>Copy environment variables from the sample file:</p> <pre><code>cp sample.env.local .env.local\n</code></pre> <p>Update <code>API_BASE_URL</code> in <code>.env.local</code> to point to your dev backend API. For example:</p> <pre><code>API_BASE_URL=http://dev.example.com/api\n</code></pre> <p>If connecting to a local deployment cluster, set API_BASE_URL to:</p> <pre><code>API_BASE_URL=http://localhost:30870/api\n</code></pre> <p>Start the dev server:</p> <pre><code>yarn start\n</code></pre> <p>This will open <code>localhost:9870</code> in a new tab in your default browser.</p> <p>To develop against a local instance of the backend API, follow instructions for deploying to a local Docker instance. Update <code>API_BASE_URL</code> and then restart the dev server.</p>"},{"location":"dev/frontend-dev/#scripts","title":"Scripts","text":"<code>yarn &lt;name&gt;</code> <code>start</code> runs app in development server, reloading on file changes <code>test</code> runs tests in chromium with playwright <code>build-dev</code> bundles app and outputs it in <code>dist</code> directory <code>build</code> bundles app, optimized for production, and outputs it to <code>dist</code> <code>lint</code> find and fix auto-fixable javascript errors <code>format</code> formats js, html and css files <code>localize:extract</code> generate XLIFF file to be translated <code>localize:build</code> output a localized version of strings/templates"},{"location":"dev/frontend-dev/#testing","title":"Testing","text":"<p>Tests assertions are written in Chai.</p> <p>To watch for file changes while running tests:</p> <pre><code>yarn test --watch\n</code></pre> <p>To run tests in multiple browsers:</p> <pre><code>yarn test --browsers chromium firefox webkit\n</code></pre>"},{"location":"dev/frontend-dev/#localization","title":"Localization","text":"<p>Wrap text or templates in the <code>msg</code> helper to make them localizable:</p> <pre><code>// import from @lit/localize:\nimport { msg } from \"@lit/localize\";\n// later, in the render function:\nrender() {\nreturn html`\n    &lt;button&gt;\n${msg(\"Click me\")}\n    &lt;/button&gt;\n  `\n}\n</code></pre> <p>Entire templates can be wrapped as well:</p> <pre><code>render() {\nreturn msg(html`\n    &lt;p&gt;Click the button&lt;/p&gt;\n    &lt;button&gt;Click me&lt;/button&gt;\n  `)\n}\n</code></pre> <p>See: https://lit.dev/docs/localization/overview/#message-types</p> <p>To add new languages:</p> <ol> <li>Add BCP 47 language tag to <code>targetLocales</code> in <code>lit-localize.json</code></li> <li>Run <code>yarn localize:extract</code> to generate new .xlf file in <code>/xliff</code></li> <li>Provide .xlf file to translation team</li> <li>Replace .xlf file once translated</li> <li>Run <code>yarn localize:build</code> bring translation into <code>src</code></li> </ol> <p>See: https://lit.dev/docs/localization/overview/#extracting-messages</p>"},{"location":"user-guide/","title":"Getting Started","text":"<p>Welcome to Browsertrix Cloud. This Guide will cover various aspects of using Browsertrix Cloud.</p>"},{"location":"user-guide/#creating-an-account","title":"Creating an Account","text":"<ul> <li> <p>If you have been given an invite, you can create an account for that email address. Choose a password and name to create a new account.</p> </li> <li> <p>If you have been given a registration link, you can enter your email address, password and name to create a new account.</p> </li> </ul>"},{"location":"user-guide/#quick-start","title":"Quick Start","text":"<p>Once you've registrated, your account will have an <code>[Your Name's Archive]</code> where you can create crawl configs and run crawls!</p>"},{"location":"user-guide/#creating-a-crawl-config","title":"Creating a Crawl Config","text":"<p>TODO: Additional info coming soon!</p>"}]}
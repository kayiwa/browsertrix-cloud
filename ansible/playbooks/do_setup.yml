---
# this playbook will set up a kubernetes cluster, a mongodb database, create a spaces instance to run browsertrix cloud
# It is assumed that you have a digital ocean API in your environment and have ACCESS keys for your Spaces
# the playbook also uses doctl
# set your env variables to have `DO_API_TOKEN` `DO_AWS_ACCESS_KEY` and `DO_AWS_SECRET_KEY`
- name: deploy browsertrix on  digital ocrean
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
   - "../group_vars/do/main.yml"
    
  tasks:

    - name: d_ocean | install doctl and helm
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - helm
        - doctl

    - name: d_ocean | test for existing mongodb
      command: doctl db list
      changed_when: false
      failed_when: false
      tags: helm_upgrade
      register: db_check

    - name: d_ocean | create mongodb database
      ansible.builtin.command: doctl databases create {{ btrix_db }} --region {{ droplet_region }} --engine mongodb --version 5 --output json
      async: 1800
      poll: 60
      register: webrecorder_database
      tags: helm_upgrade
      when: db_check.stdout.find('{{ btrix_db }}') == -1

    - name: d_ocean | drop mongodb database
      community.digitalocean.digital_ocean_database:
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        state: absent
        region: "{{ droplet_region }}"
      tags: never

    - name: d_ocean | Show the database info doctl created
      debug:
        var: webrecorder_database
        verbosity: 2

    - name: d_ocean | Show the database info doctl stdout created
      debug:
        var: webrecorder_database.stdout
        verbosity: 2

    - name: d_ocean | Gather all DigitalOcean databases
      community.digitalocean.digital_ocean_database_info:
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
      register: ansible_database

    - name: d_ocean | Show the database info we just created
      debug:
        var: ansible_database
        verbosity: 2

    - name: d_ocean | Create new Space
      community.digitalocean.digital_ocean_spaces:
        name: "{{ space_name }}"
        state: present
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        aws_access_key_id: "{{ lookup('env', 'DO_AWS_ACCESS_KEY')}}"
        aws_secret_access_key: "{{ lookup('env', 'DO_AWS_SECRET_KEY')}}"
        region: "{{ droplet_region }}"
      register: webrecorder_space
      tags: helm_upgrade
      ignore_errors: true

    - name: d_ocean | Show the space info we just created
      debug:
        var: webrecorder_space
        verbosity: 2
      ignore_errors: true

    - name: d_ocean | drop a Space
      community.digitalocean.digital_ocean_spaces:
        name: "{{ space_name }}"
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        state: absent
      tags: never

    - name: d_ocean | test for existing k8s cluster
      command: doctl k8s cluster list
      changed_when: false
      failed_when: false
      register: cluster_check

    - name: d_ocean | Show the cluster info
      debug:
        var: cluster_check
        verbosity: 2

    - name: d_ocean | create a kubernetes cluster in {{ droplet_region }}
      command: doctl kubernetes cluster create {{ k8s_cluster }} --1-clicks ingress-nginx,cert-manager --node-pool "name=main-app;size={{ droplet_size }};label=nodeType=main;count=2,name=crawling;size=c-4;label=nodeType=crawling;taint=nodeType=crawling:NoSchedule;auto-scale=true;min-nodes=1;max-nodes=3;count=1" --region={{ droplet_region }}
      async: 1800
      poll: 60
      changed_when: false
      when: cluster_check.stdout.find('{{ k8s_cluster }}') == -1

    - name: d_ocean | Get information about our cluster
      community.digitalocean.digital_ocean_kubernetes_info:
        oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
        name: "{{ k8s_cluster }}"
        return_kubeconfig: true
      register: my_cluster
      tags: helm_upgrade

    - name: d_ocean | Show the cluster info
      debug:
        var: my_cluster
        verbosity: 2

    - name: d_ocean | print information about an existing DigitalOcean Kubernetes cluster
      ansible.builtin.debug:
        msg: "Cluster name is {{ my_cluster.data.name }}, ID is {{ my_cluster.data.id }}"
      ignore_errors: true

    - name: d_ocean | print Kubernetes cluster config
      ansible.builtin.debug:
        msg: "Cluster kubeconfig is {{ my_cluster.data.kubeconfig }}"
      ignore_errors: true

    - name: d_ocean | save kubectl config to kube_dir
      command: doctl kubernetes cluster kubeconfig save {{ my_cluster.data.id }}
      changed_when: false
      tags: helm_upgrade

    - name: d_ocean | deploy btrix
      kubernetes.core.helm:
        release_name: btrix
        release_namespace: default
        kubeconfig: ~/.kube/config
        chart_ref: ../../chart/
        values:
          mongo_local: false
          mongo_auth:
            db_url: "{{ webrecorder_database.stdout[0].private_connection.uri }}"
            username: root
            password: example
          minio_local: false

          storages:
          - name: "default"
            access_key: "{{ lookup('env', 'DO_AWS_ACCESS_KEY')}}"
            secret_key: "{{ lookup('env', 'DO_AWS_SECRET_KEY')}}"

            endpoint_url: "{{ webrecorder_space.data.space.space_url }}"

          rwp_base_url: "{{ domain_name }}"
          superuser:
            email: "{{ email_address }}"
        values_files:
          - ../../chart/values.yaml
      tags: helm_upgrade
      ignore_errors: true

    - name: d_ocean | get loadbalancer info from doctl
      command: doctl k8s cluster list-associated-resources {{ my_cluster.data.id }} --format LoadBalancers --output json
      register: my_lb

    - name: d_ocean | show loadbalancer ip
      command: doctl compute load-balancer list
      register: doc_lb_ip

    - name: d_ocean | Show the cluster info
      debug:
        var: doc_lb_ip
        verbosity: 2

    - name: d_ocean | register the dns of your webrecorder
      command: doctl compute domain records create --record-type A --record-name "btrixcloud-{{ ip_name | default('test1') }}" --record-data "{{ loadbalancer_ip }}" "{{ domain_name }}"
      changed_when: false
      failed_when: false
      register: cluster_check

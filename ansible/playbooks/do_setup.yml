---
# this playbook will set up a kubernetes cluster, a mongodb database, create a spaces instance to run browsertrix cloud
# It is assumed that you have a digital ocean API in your environment and have ACCESS keys for your Spaces
# the playbook also uses doctl
# set your env variables to have `DO_API_TOKEN` `DO_AWS_ACCESS_KEY` and `DO_AWS_SECRET_KEY`
- name: deploy browsertrix on  digital ocrean
  hosts: localhost
  connection: local
  gather_facts: false
    #  vars_files:
    # - "../group_vars/do/vault.yml"
  vars:
    - droplet_size: "s-1vcpu-2gb"
    - droplet_region: "sfo3"
    - do_project: "{{ my_project | default('btrixcloud-test')}}"
    - space_name: "{{ my_space_name | default('btrixcloud-test')}}"
    - btrix_db: "{{ my_db | default('btrixcloud-test')}}"
    - k8s_cluster: "{{ my_k8s | default('btrixcloud-test')}}"
    - post_install: |
         Get the loadbalancer IP from your DigitalOcean and re-run the playbook by passing the IP variable
    
  tasks:

    - name: d_ocean | install doctl and helm
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - helm
        - doctl

    - name: d_ocean | Create a mongodb database
      community.digitalocean.digital_ocean_database:
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        state: present
        name: "{{ btrix_db }}"
        engine: mongodb
        size: db-s-1vcpu-1gb
        region: "{{ droplet_region }}"
        tags: webrecorder
        project_name: "{{ do_project }}"
        version: 5
        num_nodes: 1
      register: webrecorder_database
      async: 1800
      poll: 60
      ignore_errors: true

    - name: d_ocean | drop mongodb database
      community.digitalocean.digital_ocean_database:
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        state: absent
        region: "{{ droplet_region }}"
      tags: never

    - name: d_ocean | Show the database info we just created
      debug:
        var: webrecorder_database
        verbosity: 2
      ignore_errors: true

    - name: d_ocean | Create new Space
      community.digitalocean.digital_ocean_spaces:
        name: "{{ space_name }}"
        state: present
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        aws_access_key_id: "{{ lookup('env', 'DO_AWS_ACCESS_KEY')}}"
        aws_secret_access_key: "{{ lookup('env', 'DO_AWS_SECRET_KEY')}}"
        region: "{{ droplet_region }}"
      register: webrecorder_space
      ignore_errors: true

    - name: d_ocean | Show the space info we just created
      debug:
        var: webrecorder_space
        verbosity: 2
      ignore_errors: true

    - name: d_ocean | drop a Space
      community.digitalocean.digital_ocean_spaces:
        name: "{{ space_name }}"
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        state: absent
      tags: never

    #    using ansible module does not work reliably
    #    - name: d_ocean | Create a new DigitalOcean Kubernetes cluster in {{ droplet_region }}
    #  community.digitalocean.digital_ocean_kubernetes:
    #    state: present
    #    oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
    #    name: "{{ k8s_cluster }}"
    #    region: "{{ droplet_region }}"
    #    node_pools:
    #      - name: "{{ k8s_cluster }}-workers"
    #        size: "{{ droplet_size }}"
    #        count: 3
    #    return_kubeconfig: true
    #    wait_timeout: 600
    #    tags: webrecorder
    #  register: webrecorder_cluster
    #  ignore_errors: true

    - name: d_ocean | test for existing k8s cluster
      command: doctl k8s cluster list
      changed_when: false
      failed_when: false
      register: cluster_check

    - name: d_ocean | Show the cluster info
      debug:
        var: cluster_check
        verbosity: 2

    - name: d_ocean | create a kubernetes cluster in {{ droplet_region }}
      command: doctl kubernetes cluster create {{ k8s_cluster }} --1-clicks ingress-nginx,cert-manager --node-pool "name=main-app;size={{ droplet_size }};label=nodeType=main;count=2,name=crawling;size=c-4;label=nodeType=crawling;taint=nodeType=crawling:NoSchedule;auto-scale=true;min-nodes=1;max-nodes=3;count=1" --region={{ droplet_region }}
      async: 1800
      poll: 60
      changed_when: false
      when: cluster_check.stdout.find('{{ k8s_cluster }}') == -1

    - name: d_ocean | Get information about our cluster
      community.digitalocean.digital_ocean_kubernetes_info:
        oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
        name: "{{ k8s_cluster }}"
        return_kubeconfig: true
      register: my_cluster

    - name: d_ocean | Show the cluster info
      debug:
        var: my_cluster
        verbosity: 2

    - name: d_ocean | print information about an existing DigitalOcean Kubernetes cluster
      ansible.builtin.debug:
        msg: "Cluster name is {{ my_cluster.data.name }}, ID is {{ my_cluster.data.id }}"
      ignore_errors: true

    - name: d_ocean | print Kubernetes cluster config
      ansible.builtin.debug:
        msg: "Cluster kubeconfig is {{ my_cluster.data.kubeconfig }}"
      ignore_errors: true

    - name: d_ocean | save kubectl config to kube_dir
      command: doctl kubernetes cluster kubeconfig save {{ my_cluster.data.id }}
      changed_when: false
      ignore_errors: true

    - name: d_ocean | deploy btrix
      kubernetes.core.helm:
        release_name: btrix
        release_namespace: default
        kubeconfig: ~/.kube/config
        chart_ref: ../../chart/
        values:
          mongo_local: false
          mongo_auth:
            db_url: "{{ webrecorder_database.data.uri }}"
            username: root
            password: example
          minio_local: false

          storages:
          - name: "default"
            access_key: "DO_AWS_ACCESS_KEY"
            secret_key: "DO_AWS_SECRET_KEY"

            endpoint_url: "{{ webrecorder_space.data.space_url }}"

          rwp_base_url: "{{ domain_name }}"
          superuser:
            email: example@domain.com
        values_files:
          - ../../chart/values.yaml
      ignore_errors: true

    - name: d_ocean | get loadbalancer info from doctl
      command: doctl k8s cluster list-associated-resources {{ my_cluster.data.id }}
      register: my_lb

    - name: d_ocean | Show the loadbalancer info from doctl
      debug:
        var: my_lb
        verbosity: 2

          #    - name: d_ocean | save doctl results as json
          #      ansible.builtin.set_fact:
          #        doctllb: "{{ my_lb | from_json }}"

          #    - name: d_ocean | Show the loadbalancer info with json
          #      debug:
          #        var: doctllb
          #        verbosity: 2

    - name: d_ocean | show loadbalancer ip
      command: doctl compute load-balancer list
      register: doc_lb_ip

    - name: d_ocean | Show the loadbalancer info
      debug:
        var: doc_lb_ip
        verbosity: 2

    - name: d_ocean | Show the loadbalancer ip from ansible
      community.digitalocean.digital_ocean_load_balancer_info:
        oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
      register: lb_ip

    - name: d_ocean | print ip of your loadbalancer from ansible
      ansible.builtin.debug:
        #var: "{{ lb_ip | type_debug }}"
        var: lb_ip
        verbosity: 2
      ignore_errors: true

        #    - name: d_ocean | print loadbalancer ip from list
        # ansible.builtin.debug:
        #  var: lb_ip.data.['4']
        #  verbosity: 2

          # example from ansible documentation
          #    - name: d_ocean | query json
          # ansible.builtin.debug: msg="{{ lb_ip | json_query(jmesquery) }}"
          # vars:
          # jmesquery: "[*].{Name: name, Email: email, Phone: phone, CompanyName: company.name, WebSite: website, City: address.city}"

    - name: d_ocean | Create default A record
      community.digitalocean.digital_ocean_domain_record:
        state: present
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        domain: "{{ domain_name | default('example.edu') }}"
        type: A
        name: "@"
        data: "{{ lb_ip | default('omit')}}"
      ignore_errors: true

    - name: d_ocean | register the dns of your webrecorder
      command: doctl compute domain records create --record-type A --record-name test1 --record-data "{{ loadbalancer_ip }}" "{{ domain_name }}"
      changed_when: false
      failed_when: false
      register: cluster_check



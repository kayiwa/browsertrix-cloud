---
# this playbook will set up a kubernetes cluster, a mongodb database, create a spaces instance to run browsertrix cloud
# It is assumed that you have a digital ocean API in your environment and have ACCESS keys for your Spaces
# the playbook also uses doctl
# set your env variables to have `DO_API_TOKEN` `DO_AWS_ACCESS_KEY` and `DO_AWS_SECRET_KEY`
- name: deploy browsertrix on  digital ocrean
  hosts: localhost
  connection: local
  gather_facts: false
    #  vars_files:
    # - "../group_vars/do/vault.yml"
  vars:
    #    ansible_python_interpreter: /usr/bin/python
    droplet_size: "s-1vcpu-2gb"
    droplet_region: "sfo3"
    do_project: "{{ my_project | default('test')}}"
    
  tasks:

    - name: d_ocean | Create a mongodb database
      community.digitalocean.digital_ocean_database:
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        state: present
        name: webrecorder
        engine: mongodb
        size: db-s-1vcpu-1gb
        region: "{{ droplet_region }}"
        tags: webrecorder
        project_name: "{{ do_project }}"
        version: 5
        num_nodes: 1
      register: webrecorder_database
      ignore_errors: true

    - name: d_ocean | Gather databases info
      community.digitalocean.digital_ocean_database_info:
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
      register: my_databases

    - name: d_ocean | Show the database info we just created
      debug:
        msg: "{{ my_databases.results }}"
      ignore_errors: true

    - name: d_ocean | Create new Space
      community.digitalocean.digital_ocean_spaces:
        name: webrecorder
        aws_access_key_id: "{{ lookup('env', 'DO_AWS_ACCESS_KEY')}}"
        aws_secret_access_key: "{{ lookup('env', 'DO_AWS_SECRET_KEY')}}"
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        region: "{{ droplet_region }}"
      ignore_errors: true

    - name: d_ocean | Create a new DigitalOcean Kubernetes cluster in {{ droplet_region }}
      community.digitalocean.digital_ocean_kubernetes:
        state: present
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        name: webrecorder
        region: "{{ droplet_region }}"
        node_pools:
          - name: webrecorder-workers
            size: "{{ droplet_size }}"
            count: 3
        return_kubeconfig: true
        wait_timeout: 600
        tags: webrecorder
      register: webrecorder_cluster
      ignore_errors: true

    - name: d_ocean | Get information about an existing DigitalOcean Kubernetes cluster
      community.digitalocean.digital_ocean_kubernetes_info:
        oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
        name: webrecorder
        return_kubeconfig: true
      register: my_cluster
      ignore_errors: true

    - name: d_ocean | print information about an existing DigitalOcean Kubernetes cluster
      ansible.builtin.debug:
        msg: "Cluster name is {{ my_cluster.data.name }}, ID is {{ my_cluster.data.id }}"
      ignore_errors: true

    - name: d_ocean | print Kubernetes cluster config
      ansible.builtin.debug:
        msg: "Cluster kubeconfig is {{ my_cluster.data.kubeconfig }}"
      ignore_errors: true

    - name: d_ocean | save kubectl config to kube_dir
      command: doctl kubernetes cluster kubeconfig save {{ my_cluster.data.id }}
      changed_when: false
      ignore_errors: true

    - name: d_ocean | Create default A record
      community.digitalocean.digital_ocean_domain_record:
        state: present
        oauth_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
        domain: "{{ domain_name | default('omit') }}"
        type: A
        name: "@"
        data: "{{ lb_ip | default('omit')}}"
      ignore_errors: true

    - name: d_ocean | deploy btrix
      command: "helm upgrade --install -f ./chart/values.yaml btrix ./chart"
      args:
        chdir: ../../
      changed_when: false
      ignore_errors: true

    - name: d_ocean | Create a do service for a load balancer
      command: "kubectl apply -f kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.1/deploy/static/provider/do/deploy.yaml"
      changed_when: false
